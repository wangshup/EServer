package com.dd.game.core.config.tools;

public final class CodeTemplet {
    public static final String packageName = "com.dd.game.core.config.xml";
    public static final String parseFile = "package " + packageName + ".parser;\r\n"
            + "\r\n"
            + "import java.lang.reflect.Field;\r\n"
            + "import org.slf4j.Logger;\r\n"
            + "import org.slf4j.LoggerFactory;\r\n"
            + "import " + packageName + ".AbstractConfigParser;\r\n"
            + "import " + packageName + ".XmlAttributes;\r\n"
            + "import " + packageName + ".entitys.@unameConfig;\r\n"
            + "import " + packageName + ".entitys.@unameEntity;\r\n"
            + "\r\n"
            + "public class @unameParser extends AbstractConfigParser<@unameConfig> {\r\n"
            + "\r\n"
            + "    private static final Logger logger = LoggerFactory.getLogger(@unameParser.class);\r\n"
            + "\r\n"
            + "    public @unameParser() {\r\n"
            + "        this(\"@lname.xml\");\r\n"
            + "    }\r\n"
            + "\r\n"
            + "    public @unameParser(String xmlFile) {\r\n"
            + "        super(xmlFile);\r\n"
            + "    }\r\n"
            + "\r\n"
            + "    @Override\r\n"
            + "    protected @unameConfig createConfig() {\r\n"
            + "        return new @unameConfig();\r\n"
            + "    }\r\n"
            + "\r\n"
            + "    @Override\r\n"
            + "    protected void onParseCompleted() {\r\n"
            + "        super.onParseCompleted();\r\n"
            + "    }\r\n"
            + "\r\n"
            + "    @Override\r\n"
            + "    protected void startElement(String qName, XmlAttributes attributes, Object param) {\r\n"
            + "        try {\r\n"
            + "            @unameEntity entity = new @unameEntity();\r\n"
            + "            int fieldCount = entity.getClass().getDeclaredFields().length;\r\n"
            + "            int attrCount = attributes.getLength();\r\n"
            + "            if (fieldCount != attrCount) {\r\n"
            + "                logger.warn(\"attributes count {} not match spec fields {}\", attrCount, fieldCount);\r\n"
            + "            }\r\n"
            + "            for (int i = 0; i < attributes.getLength(); ++i) {\r\n"
            + "                String fieldName = attributes.getQName(i);\r\n"
            + "                Field f = @unameEntity.class.getDeclaredField(fieldName);\r\n"
            + "                f.setAccessible(true);\r\n"
            + "                f.set(entity, getValue(fieldName, f.getGenericType(), attributes));\r\n"
            + "            }\r\n"
            + "            this.config.put(entity);\r\n"
            + "        } catch (Exception e) {\r\n"
            + "            logger.error(\"parse element error!\", e);\r\n"
            + "        }"
            + "\r\n"
            + "    }\r\n"
            + "}";
    
    public static final String configFile = "package " + packageName + ".entitys;\r\n"
            + "\r\n"
            + "import java.util.Map;\r\n"
            + "\r\n"           
            + "import com.google.common.collect.Maps;\r\n"
            + "\r\n"
            + "public class @unameConfig {\r\n"
            + "\r\n"
            + "    private Map<Integer, @unameEntity> map = Maps.newHashMap();\r\n"
            + "\r\n"
            + "    public void put(@unameEntity entity) {\r\n"
            + "        map.put(entity.getId(), entity);\r\n"
            + "    }\r\n"
            + "\r\n"
            + "    public @unameEntity get(int id) {\r\n"
            + "        for (@unameEntity entity : map.values()) {\r\n"
            + "            if (entity.getId() == id)\r\n"
            + "                return entity;\r\n"
            + "        }\r\n"
            + "        return null;\r\n"
            + "    }\r\n"
            + "}" ;
}
